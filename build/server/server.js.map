{"version":3,"sources":["server/server.ts"],"names":[],"mappings":";AAAA,mDAAmD;AACnD,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,UAAU,WAAM,aAAa,CAAC,CAAA;AAC1C,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,IAAY,cAAc,WAAM,iBAAiB,CAAC,CAAA;AAClD,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,qEAAqE;AACrE,+DAA+D;AAC/D,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACvC,IAAM,GAAG,GAAwB,OAAO,EAAE,CAAC;AAC3C,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAChC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACnD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC;AAC/D,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;AAC1B,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACvB,cAAc;AACd,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,IAAI;IAC5B,uCAAuC;IACvC,GAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,uBAAuB,CAAC,CAAC;IACtE,oCAAoC;IACpC,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,wCAAwC,CAAC,CAAC;IACxF,oCAAoC;IACpC,GAAG,CAAC,SAAS,CAAC,8BAA8B,EAAE,+BAA+B,CAAC,CAAC;IAC/E,mCAAmC;IACnC,IAAI,EAAE,CAAC;AACX,CAAC,CAAC,CAAC;AACH,IAAM,IAAI,GAAW,EAAE,CAAC;AACxB,mCAAmC;AACnC,gCAAgC;AAChC,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;IAC1B,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC","file":"../../src/server/server.js","sourcesContent":["/// <reference path=\"./../../typings/index.d.ts\" />\nimport * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport * as morgan from 'morgan';\nimport * as methodOverride from 'method-override';\nimport * as mongoose from 'mongoose';\nimport * as bluebird from 'bluebird';\n// import * as requestRouter from './controllers/request.controller';\n// import * as userRouter from './controllers/user.controller';\nvar config = require('./../../config');\nconst app: express.Application = express();\nbluebird.promisifyAll(mongoose);\nmongoose.connect(config.db.prod.url);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(bodyParser.json({ type: 'application/vnd.api+json' }));\napp.use(methodOverride());\napp.use(morgan('dev'));\n// Add headers\napp.use(function (req, res, next) {\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:4200');\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n    // Pass to next layer of middleware\n    next();\n});\nconst port: number = 80;\n// app.use('/api/', requestRouter);\n// app.use('/api/', userRouter);\nvar server = app.listen(port, () => {\n    console.log('Application is running port %s', port);\n});"]}